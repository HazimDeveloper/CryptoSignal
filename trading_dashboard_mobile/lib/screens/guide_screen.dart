// screens/guide_screen.dart
import 'package:flutter/material.dart';

class GuideScreen extends StatelessWidget {
  const GuideScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('App Guide'),
        centerTitle: false,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildWelcomeSection(context),
            const SizedBox(height: 24),
            _buildFeaturesSection(context),
            const SizedBox(height: 24),
            _buildScreensSection(context),
            const SizedBox(height: 24),
            _buildTradeSignalsSection(context),
            const SizedBox(height: 24),
            _buildPerformanceSection(context),
            const SizedBox(height: 24),
            _buildTipsSection(context),
            const SizedBox(height: 32),
          ],
        ),
      ),
    );
  }

  Widget _buildWelcomeSection(BuildContext context) {
    return Card(
      elevation: 0,
      color: Theme.of(context).cardColor,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(10),
                  decoration: BoxDecoration(
                    color: Colors.blue.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(10),
                  ),
                  child: const Icon(
                    Icons.waving_hand,
                    color: Colors.blue,
                    size: 24,
                  ),
                ),
                const SizedBox(width: 16),
                const Expanded(
                  child: Text(
                    'Welcome to Trading Dashboard!',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            const Text(
              'This app uses machine learning to analyze cryptocurrency market data and generate trading signals, helping you make informed trading decisions.',
              style: TextStyle(fontSize: 14),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildFeaturesSection(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Padding(
          padding: EdgeInsets.only(left: 8.0, bottom: 8.0),
          child: Text(
            'Key Features',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
        Card(
          elevation: 0,
          color: Theme.of(context).cardColor,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              children: [
                _buildFeatureItem(
                  icon: Icons.trending_up,
                  title: 'Predictive Trading Signals',
                  description: 'Get BUY, SELL, and HOLD signals generated by our ML model',
                ),
                const Divider(height: 24),
                _buildFeatureItem(
                  icon: Icons.pie_chart,
                  title: 'Market Regime Detection',
                  description: 'Understand market conditions through automatic regime detection',
                ),
                const Divider(height: 24),
                _buildFeatureItem(
                  icon: Icons.insights,
                  title: 'Performance Metrics',
                  description: 'Track model performance with key metrics like Sharpe ratio',
                ),
                const Divider(height: 24),
                _buildFeatureItem(
                  icon: Icons.notifications_active,
                  title: 'Real-time Notifications',
                  description: 'Receive alerts when new trading signals are generated',
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildScreensSection(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Padding(
          padding: EdgeInsets.only(left: 8.0, bottom: 8.0),
          child: Text(
            'App Navigation',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
        Card(
          elevation: 0,
          color: Theme.of(context).cardColor,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              children: [
                _buildScreenItem(
                  icon: Icons.dashboard,
                  title: 'Dashboard',
                  description: 'Overview of model performance, recent signals, and price summary',
                ),
                const Divider(height: 24),
                _buildScreenItem(
                  icon: Icons.show_chart,
                  title: 'Chart',
                  description: 'Interactive price chart with trading signals and market regimes',
                ),
                const Divider(height: 24),
                _buildScreenItem(
                  icon: Icons.sync_alt,
                  title: 'Signals',
                  description: 'Detailed list of all trading signals with confidence levels',
                ),
                const Divider(height: 24),
                _buildScreenItem(
                  icon: Icons.settings,
                  title: 'Settings',
                  description: 'Configure app preferences, server connection, and data management',
                ),
                const Divider(height: 24),
                _buildScreenItem(
                  icon: Icons.menu_book,
                  title: 'Guide',
                  description: 'Instructions on how to use the app effectively (you are here)',
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildTradeSignalsSection(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Padding(
          padding: EdgeInsets.only(left: 8.0, bottom: 8.0),
          child: Text(
            'Understanding Trade Signals',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
        Card(
          elevation: 0,
          color: Theme.of(context).cardColor,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildSignalExplanation(
                  context: context,
                  signal: 'BUY',
                  color: Colors.green,
                  description: 'The model predicts price will increase. Consider opening a long position.',
                ),
                const SizedBox(height: 16),
                _buildSignalExplanation(
                  context: context,
                  signal: 'SELL',
                  color: Colors.red,
                  description: 'The model predicts price will decrease. Consider closing longs or opening shorts.',
                ),
                const SizedBox(height: 16),
                _buildSignalExplanation(
                  context: context,
                  signal: 'HOLD',
                  color: Colors.grey,
                  description: 'No clear direction detected. Consider maintaining current positions.',
                ),
                const SizedBox(height: 16),
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.blue.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: const Row(
                    children: [
                      Icon(Icons.info_outline, color: Colors.blue, size: 20),
                      SizedBox(width: 12),
                      Expanded(
                        child: Text(
                          'Signal confidence indicates how certain the model is about a prediction. Higher confidence (>70%) suggests stronger signals.',
                          style: TextStyle(fontSize: 13),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildPerformanceSection(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Padding(
          padding: EdgeInsets.only(left: 8.0, bottom: 8.0),
          child: Text(
            'Performance Metrics',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
        Card(
          elevation: 0,
          color: Theme.of(context).cardColor,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildMetricExplanation(
                  title: 'Sharpe Ratio',
                  description: 'Measures risk-adjusted returns. Higher is better (target: ≥1.8).',
                  icon: Icons.assessment,
                ),
                const Divider(height: 24),
                _buildMetricExplanation(
                  title: 'Maximum Drawdown',
                  description: 'Largest peak-to-trough decline. Lower is better (target: ≤40%).',
                  icon: Icons.trending_down,
                ),
                const Divider(height: 24),
                _buildMetricExplanation(
                  title: 'Trade Frequency',
                  description: 'Percentage of data points with active signals (target: ≥3%).',
                  icon: Icons.sync_alt,
                ),
                const SizedBox(height: 16),
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.green.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Row(
                    children: [
                      Icon(Icons.check_circle, color: Colors.green[700], size: 20),
                      const SizedBox(width: 12),
                      const Expanded(
                        child: Text(
                          'When all targets are met, the model is operating at optimal performance levels.',
                          style: TextStyle(fontSize: 13),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildTipsSection(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Padding(
          padding: EdgeInsets.only(left: 8.0, bottom: 8.0),
          child: Text(
            'Tips for Best Results',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
        Card(
          elevation: 0,
          color: Theme.of(context).cardColor,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              children: [
                _buildTipItem(
                  number: 1,
                  tip: 'Refresh data regularly using the floating refresh button to get the latest signals',
                ),
                const Divider(height: 24),
                _buildTipItem(
                  number: 2,
                  tip: 'Pay attention to market regimes - signals are more reliable when they align with the current regime',
                ),
                const Divider(height: 24),
                _buildTipItem(
                  number: 3,
                  tip: 'Consider signal confidence level - higher confidence signals (>70%) tend to be more reliable',
                ),
                const Divider(height: 24),
                _buildTipItem(
                  number: 4,
                  tip: 'Enable notifications to be alerted about new trade signals without checking the app',
                ),
                const Divider(height: 24),
                _buildTipItem(
                  number: 5,
                  tip: 'Always combine model signals with your own research and risk management strategy',
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildFeatureItem({
    required IconData icon,
    required String title,
    required String description,
  }) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Container(
          padding: const EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: Colors.blue.withOpacity(0.15),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Icon(
            icon,
            color: Colors.blue,
            size: 20,
          ),
        ),
        const SizedBox(width: 16),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                title,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 15,
                ),
              ),
              const SizedBox(height: 4),
              Text(
                description,
                style: TextStyle(
                  fontSize: 13,
                  color: Colors.grey[300],
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildScreenItem({
    required IconData icon,
    required String title,
    required String description,
  }) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Icon(
          icon,
          color: Colors.blue,
          size: 22,
        ),
        const SizedBox(width: 16),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                title,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 15,
                ),
              ),
              const SizedBox(height: 4),
              Text(
                description,
                style: TextStyle(
                  fontSize: 13,
                  color: Colors.grey[300],
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildSignalExplanation({
    required BuildContext context,
    required String signal,
    required Color color,
    required String description,
  }) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Container(
          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
          decoration: BoxDecoration(
            color: color.withOpacity(0.2),
            borderRadius: BorderRadius.circular(4),
          ),
          child: Text(
            signal,
            style: TextStyle(
              color: color,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
        const SizedBox(width: 16),
        Expanded(
          child: Text(
            description,
            style: const TextStyle(fontSize: 14),
          ),
        ),
      ],
    );
  }

  Widget _buildMetricExplanation({
    required String title,
    required String description,
    required IconData icon,
  }) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Icon(
          icon,
          color: Colors.blue,
          size: 20,
        ),
        const SizedBox(width: 16),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                title,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 15,
                ),
              ),
              const SizedBox(height: 4),
              Text(
                description,
                style: TextStyle(
                  fontSize: 13,
                  color: Colors.grey[300],
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildTipItem({
    required int number,
    required String tip,
  }) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Container(
          width: 24,
          height: 24,
          alignment: Alignment.center,
          decoration: BoxDecoration(
            color: Colors.blue.withOpacity(0.2),
            shape: BoxShape.circle,
          ),
          child: Text(
            number.toString(),
            style: const TextStyle(
              color: Colors.blue,
              fontWeight: FontWeight.bold,
              fontSize: 14,
            ),
          ),
        ),
        const SizedBox(width: 16),
        Expanded(
          child: Text(
            tip,
            style: const TextStyle(fontSize: 14),
          ),
        ),
      ],
    );
  }
}